// ---------------- [ File: bitcoin-version/src/clientversion.rs ]
crate::ix!();

//-------------------------------------------[.cpp/bitcoin/src/clientversion.h]

/**
  | Copyright string used in Windows .rc
  | files
  |
  */
macro_rules! copyright_str {
    () => {
        /*
                "2009-" STRINGIZE(COPYRIGHT_YEAR) " " COPYRIGHT_HOLDERS_FINAL
        */
    }
}

/*
  | bitcoind-res.rc includes this file,
  | but it cannot cope with real c++ code.
  | 
  | WINDRES_PREPROC is defined to indicate
  | that its pre-processor is running.
  | Anything other than a define should
  | be guarded below.
  |
  */
pub const CLIENT_VERSION_MAJOR: i32 = 22;
pub const CLIENT_VERSION_MINOR: i32 = 99;
pub const CLIENT_VERSION_BUILD: i32 = 0;

#[cfg(not(WINDRES_PREPROC))]
pub const CLIENT_VERSION: i32 = 
10000 * CLIENT_VERSION_MAJOR
+ 100 * CLIENT_VERSION_MINOR
+   1 * CLIENT_VERSION_BUILD;

/**
  | Name of client reported in the 'version'
  | message. Report the same name for both
  | bitcoind and bitcoin-qt, to make it
  | harder for attackers to target servers
  | or GUI users specifically.
  |
  */
#[cfg(not(WINDRES_PREPROC))]
pub const CLIENT_NAME: &'static str = "Satoshi";

//-------------------------------------------[.cpp/bitcoin/src/clientversion.cpp]

/**
  | The <obj/build.h>, which is generated by the
  | build environment (share/genbuild.sh), could
  | contain only one line of the following:
  |
  |   - "#define BUILD_GIT_TAG ...", if the top
  |   commit is tagged
  |
  |   - "#define BUILD_GIT_COMMIT ...", if the top
  |   commit is not tagged
  |
  |   - "// No build information available", if
  |   proper git information is not available
  */
lazy_static!{
    /*
    #ifdef HAVE_BUILD_INFO
    #include <obj/build.h>
    #endif
    */
}

/*
  | git will put "#define GIT_COMMIT_ID ..." on
  | the next line inside
  | archives. $Format:%n#define GIT_COMMIT_ID
  | "%H"$
  */

#[cfg(BUILD_GIT_TAG)]
pub const BUILD_DESC:   &'static str = BUILD_GIT_TAG;

#[cfg(BUILD_GIT_TAG)]
pub const BUILD_SUFFIX: &'static str = "";

///-----------------
pub const PACKAGE_VERSION: &'static str = "22.99.0";

#[cfg(not(BUILD_GIT_TAG))]
lazy_static!{
    static ref BUILD_DESC: String = format!("v{}", PACKAGE_VERSION);
}

#[cfg(not(BUILD_GIT_TAG))]
#[cfg(all(CLIENT_VERSION_IS_RELEASE,not(BUILD_GIT_COMMIT),not(GIT_COMMIT_ID)))]
pub const BUILD_SUFFIX: &'static str = "";

#[cfg(not(BUILD_GIT_TAG))]
#[cfg(all(BUILD_GIT_COMMIT,not(CLIENT_VERSION_IS_RELEASE),not(GIT_COMMIT_ID)))]
lazy_static!{
    static ref BUILD_SUFFIX: String = format!("-{}", BUILD_GIT_COMMIT);
}

#[cfg(not(BUILD_GIT_TAG))]
#[cfg(all(GIT_COMMIT_ID,not(CLIENT_VERSION_IS_RELEASE),not(BUILD_GIT_COMMIT)))]
lazy_static!{
    static ref BUILD_SUFFIX: String = format!("-g{}", GIT_COMMIT_ID);
}

#[cfg(not(BUILD_GIT_TAG))]
#[cfg(not(any(CLIENT_VERSION_IS_RELEASE,BUILD_GIT_COMMIT,GIT_COMMIT_ID)))]
pub const BUILD_SUFFIX: &'static str = "-unk";

///-----------------
pub fn format_version(n_version: i32) -> String {
    
    format!(
        "{}.{}.{}",
        n_version / 10000,
        (n_version / 100) % 100,
        n_version % 100
    )

}

#[cfg(not(WINDRES_PREPROC))]
pub fn format_full_version() -> String {
    
    todo!();
        /*
           static const std::string CLIENT_BUILD(BUILD_DESC BUILD_SUFFIX);
           return CLIENT_BUILD;
        */
}

/**
  | Format the subversion field according
  | to BIP 14 spec (https://github.com/bitcoin/bips/blob/master/bip-0014.mediawiki)
  |
  */
#[cfg(not(WINDRES_PREPROC))]
pub fn format_sub_version(
        name:             &String,
        n_client_version: i32,
        comments:         &Vec<String>) -> String {
    
    todo!();
        /*
            std::ostringstream ss;
        ss << "/";
        ss << name << ":" << FormatVersion(nClientVersion);
        if (!comments.empty())
        {
            std::vector<std::string>::const_iterator it(comments.begin());
            ss << "(" << *it;
            for(++it; it != comments.end(); ++it)
                ss << "; " << *it;
            ss << ")";
        }
        ss << "/";
        return ss.str();
        */
}
